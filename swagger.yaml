//Swagger jsdoc options

const swaggerOptions = {
  swaggerDefinition: {
    servers: [
      {
        url: "http://localhost:3000/",
      },
    ],
    info: {
      title: "Backend Developer Intern Assessment - Lalitendra",
      version: "1.0.0",
      description: "Documentation for API endpoints",
    },
    components: {
      securitySchemes: {
        bearerAuth: {
          type: "http",
          scheme: "bearer",
          bearerFormat: "JWT",
        },
      },
    },
  },
  securityDefinitions: {
    bearerAuth: {
      type: "apiKey",
      name: "Authorization",
      in: "header",
      description: 'Enter JWT token in the format "Bearer {token}"',
    },
  },
  apis: ["index.js"],
};

// Initialize Swagger
const swaggerDocs = swaggerJsdoc(swaggerOptions);
app.get("/swagger.json", (req, res) => {
  res.setHeader("Content-Type", "application/json");
  res.send(swaggerSpec);
});
app.use("/api-docs", swaggerUi.serve, swaggerUi.setup(swaggerDocs));

/**
 * @swagger
 * /register:
 *   post:
 *     summary: Register a new user
 *     parameters:
 *       - in: body
 *         name: user
 *         description: The user to create.
 *         schema:
 *           type: object
 *           required:
 *             - username
 *             - email
 *             - password
 *           properties:
 *             username:
 *               type: string
 *             email:
 *               type: string
 *             password:
 *               type: string
 *     responses:
 *       201:
 *         description: User registered successfully
 *       500:
 *         description: Internal server error
 */

/**
 * @swagger
 * /login:
 *   post:
 *     summary: Login and get JWT token
 *     parameters:
 *       - in: body
 *         name: user
 *         description: The user credentials.
 *         schema:
 *           type: object
 *           required:
 *             - username
 *             - password
 *           properties:
 *             username:
 *               type: string
 *             password:
 *               type: string
 *     responses:
 *       200:
 *         description: JWT token generated
 *       401:
 *         description: Invalid username or password
 *       500:
 *         description: Internal server error
 */

/**
 * @swagger
 * /logout:
 *   post:
 *     summary: Logouts the User
 *     parameters:
 *       - in: body
 *         name: user
 *         description: The user credentials.
 *         schema:
 *           type: object
 *           required:
 *             - username
 *             - password
 *           properties:
 *             username:
 *               type: string
 *             password:
 *               type: string
 *     responses:
 *       200:
 *         description: Logged out
 *       400:
 *         description: Invalid User
 *       401:
 *         description: Invalid JWT Token
 *       500:
 *         description: Internal server error
 */

/**
 * @swagger
 * /entries:
 *   get:
 *     summary: Retrieve data from a public API
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: category
 *         schema:
 *           type: string
 *         description: Filter data by category
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *         description: Limit the number of results
 *     produces:
 *          -application/json
 *     responses:
 *       200:
 *         description: Successfully retrieved data
 *         content:
 *           application/json:
 *               schema:
 *               type: array
 *               items:
 *                 type: object
 *                 properties:
 *                   API:
 *                     type: string
 *                   Description:
 *                     type: string
 *                   Auth:
 *                     type: string
 *                   HTTPS:
 *                     type: boolean
 *                   Cors:
 *                     type: string
 *                   Link:
 *                     type: string
 *                   Category:
 *                     type: string
 *       401:
 *         description: Unauthorized. Token is missing or invalid
 */
